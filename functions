#use source ~/.functions to load
#declare -F to list functions from bash 
#test_function straight from bash to check it (exists in this file)

echo "Unsetting old functions..."

for function in `declare -F | awk '{ print $3 }' `; do unset $function; done

echo "Sourcing functions..."

acpi () {
    vboxmanage controlvm $1 acpipowerbutton
    if [[ $# -lt 1 ]]; then
        echo "Usage: acpi <vmname>"
        echo "Example: acpi OpenBSD"
        return -1
    fi
}

build_me () {
    CWD=`pwd`
    echo "Called build me function..."
    cd ~/working/github/arch_x86_64_configs
    ./build_me.sh
    #source ~/.functions
    #source ~/.functions-private
    #echo "Unsetting and re-setting all aliases..."
    #unalias -a
    #source ~/.aliases
    #source ~/.aliases-private
    source ~/.bashrc
    cd $CWD; unset CWD
    echo "Finished build function..."
}

deploy_profile() {
    #echo "Running deploy profile.."
    if [[ $# -lt 1 ]]; then
        echo "Usage: deploy_profile user@fqdn"
        echo "Example: deploy_profile dansullivan@magicalhost.domain.com"
        return -1
    fi
    CWD=`pwd`
    cd ~/working/github/arch_x86_64_configs
    echo "Removing remote ~/.vimrc..."
    ssh $1 'if [ -e ~/.vimrc ]; then rm ~/.vimrc; echo deleted ~/.vimrc...; else echo ~/.vimrc not found; fi'
    scp vimrc $1:~/.vimrc
    echo "Uploaded ~/.vimrc..."
    cd $CWD; unset CWD
}

cb () {
  xclip -out | xclip -selection clipboard
}

#ctrl+c, trapped from bash
ctrl_c () {
  echo "* Trapped CTRL-C *"
}

hangup () {
  echo "* Trapped SIGHUP *"
}

#this function will return 1 a named screen instance exists, 0 if it doesnt
doesnamedscreenexist(){
    if [[ $# -lt 1 ]]; then
        echo "Usage: doesnamedscreenexist <name>"
        echo "Example: doesnamedscreenexist mail"
        return -1
    fi
    if [[ `screen -ls | grep $1 | wc -l` -eq '1' ]]; then
        echo -n "1"
    else
        echo -n "0"
    fi
}

freenode(){
    if [[ `doesnamedscreenexist freenode` -eq '1' ]]; then
        export IRCSERVER="irc.freenode.net"
        screen -rd freenode
    else
        screen -S freenode epic5 -l ~/.freenode.ircrc
    fi
}

#firefox(){
#    firefox &
#}

efnet(){
    if [[ `doesnamedscreenexist efnet` -eq '1' ]]; then
        screen -rd efnet
    else
        screen -S efnet epic -l ~/.efnet.ircrc
    fi
}

#mail(){
#    if [[ `doesnamedscreenexist mail` -eq '1' ]]; then
#        screen -rd mail
#    else
#        screen -S mail -c ~/.mscreenrc
#    fi
#}

jabber () {
    if [ `screen -list | grep jabber | wc -l` == "1" ]; then
        screen -rd jabber
    else
        screen -S jabber mcabber
    fi
}


topdisk() {
    dstat -ta --top-bio
}

show_date () {
    echo `date +%m`.`date +%d`.`date +%y`
}

test_function () {
    echo "whatever"
} 

#Take a time-stamped snapshot of my Win7 virtualbox instantiation.
snapwin7 () {
    vboxmanage snapshot Win7 take function.`date +%m`.`date +%d`.`date +%y`
}

snapxpucad () {
    vboxmanage snapshot "XP (UCAD)" take function.`date +%m`.`date +%d`.`date +%y`
}

#kill every open RDP session on my box.
rdpkill () {
  for i in `ps -ef | grep rdesktop | grep -v grep | awk '{ print $2 }'`; do kill $i; done
  #this one is for mac.
  for i in `pgrep Microsoft Remote Desktop`; do kill $i; done
}

resetclip () {
    kill `pgrep autocutsel`; 
    autocutsel -selection CLIPBOARD -fork; 
    autocutsel -selection PRIMARY -fork
}

killrdp () {
    rdpkill
}

bash_prompt () {
    local txtblk='\e[0;30m' # Black - Regular
    local txtred='\e[0;31m' # Red
    local txtgrn='\e[0;32m' # Green
    local txtylw='\e[0;33m' # Yellow
    local txtblu='\e[0;34m' # Blue
    local txtpur='\e[0;35m' # Purple
    local txtcyn='\e[0;36m' # Cyan
    local txtwht='\e[0;37m' # White
    local bldblk='\e[1;30m' # Black - Bold
    local bldred='\e[1;31m' # Red
    local bldgrn='\e[1;32m' # Green
    local bldylw='\e[1;33m' # Yellow
    local bldblu='\e[1;34m' # Blue
    local bldpur='\e[1;35m' # Purple
    local bldcyn='\e[1;36m' # Cyan
    local bldwht='\e[1;37m' # White
   
    FMAG="\[\033[35m\]"
    
    PS1="--[\u@\h]-[\w]-[$RAILS_ENV]-\n> "
    #colors must be surrounded with \[  \], this works.  Uncomment it.
    #PS1="--[\[$bldblu\]\u@\h]-[\w]--\n> "
}

killwin7rdp () {
    kill `ps -ef | grep rdesktop | grep -v grep | grep win7.bsd.uchicago.edu:3389 | awk '{ print $ 2 } '`
}

pdf () {
    evince $1 &
}

ldap () {
    ldapsearch -v -x -LLL -h ldap.uchicago.edu -p 389 -b dc=uchicago,dc=edu uid=$1
}

ldaplname () {
    ldapsearch -v -x -LLL -h ldap.uchicago.edu -p 389 -b dc=uchicago,dc=edu sn=$1
}

sldap () {
  ldapsearch -v -x -LLL -W -H ldaps://ldap.uchicago.edu -b dc=uchicago,dc=edu \
  '( & (eduPersonAffiliation=student)(sn=Smith) )' cn telephoneNumber -D \
  "uid=dansully,ou=people,dc=uchicago,dc=edu"
}

getemail () {
  for chicagoid in `cat /tmp/cnets.txt`; do
    EMAIL=`ldapsearch -x -LLL -h ldap.uchicago.edu -p 389 -b dc=uchicago,dc=edu chicagoID=$chicagoid mail | grep -v "^filter" | grep -v "^dn:" | awk '{ print $2 }'`
    echo "$chicagoid $EMAIL" 
  done
}

#query google's dns servers
qg () {
    dig @8.8.8.8 $1
}

compress_win7 () {
    vboxmanage modifyhd "~/VirtualBox VMs/Win7 (BSDAD)/Win7 (BSDAD).vdi" --compact
}

compress_win8() {
    vboxmanage modifyhd /mnt/luksAuxiliary/Win8_Enterprise_x64/Win8_Enterprise_x64.vdi --compact
}

screenshot () {
    import ~/working/temp/screenshots/screenshot-`date +%m`.`date +%d`.`date +%y`.jpg 
    echo "The screenshot can be picked up at ~/working/temp/screenshots"
}

show_swap_utilization () {
    swapon -s 
}

rdp () {
    rdesktop -K $1 &
}

short () {
    export QUERY_RESULT=`dig +short $1 | tail -n 1 | awk '{ print $NF }' | tr -d '\n'`
    dig $1
    if [ `uname` == Darwin ]; then
        echo -n $QUERY_RESULT | pbcopy
    elif [ `uname` == Linux ]; then
        echo -n $QUERY_RESULT | xclip 
        xclip -out | xclip -selection clipboard
    else
        echo -n "Unknown platform"
    fi
        unset QUERY_RESULT
}

whatismyip () {
    curl http://icanhazip.com/
}

#my timestamp
now () {
    echo `date +%m`-`date +%d`-`date +%y`.`date +%H`.`date +%M`.`date +%S`
}

#This appears to be compiled into OSX's bash? 1/21/2014.  Needs investigation.
update_terminal_cwd () {
    local SEARCH=' ';
    local REPLACE='%20';
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}";
    printf '\e]7;%s\a' "$PWD_URL"
}

#virtualbox show vminfo
vminfo () {
    vboxmanage showvminfo $1
}

listdcs () {
    dig any _kerberos._tcp.$1
}

nscreen() {
    screen -S $1 
}

cwd() {
  if [[ $# -lt 1 ]]; then
      echo "Usage: cwd <dir>"
      echo "Example: cwd ~/Documents"
      return -1
  fi
  cd $1
}

#for testing new versions of galaxy
#stubgalaxy() {
#    cd /tmp
#    sudo rm -rf ~/.galaxy-python
#    mkdir ~/.galaxy-python
#    ln -s /usr/bin/python2 ~/.galaxy-python/python
#    export  PATH=~/.galaxy-python:$PATH
#    cd /
#    sudo rm -rf /tmp/galaxy
#    mkdir -p /tmp/galaxy
#    cd /tmp/galaxy
#    #hg clone https://bitbucket.org/galaxy/galaxy-dist/
#    hg clone https://bitbucket.org/galaxy/galaxy-dist/ -r 11247
#    cd galaxy-dist
#    #hg update stable
#    cp universe_wsgi.ini.sample universe_wsgi.ini
#    cp config/galaxy.ini.sample config/galaxy.ini
#    sed -i 's\#admin_users = None\admin_users = dansully@uchicago.edu\g' universe_wsgi.ini
#    sh run.sh
#}


installrvm() {
  \curl -L https://get.rvm.io | bash -s stable --autolibs=enabled
}

loadrvm() {
   if [ -e ~/.rvm/scripts/rvm ]; then
      source ~/.rvm/scripts/rvm > /dev/null
      #export PATH=$HOME/.rvm/bin:$PATH;
      rvm list
      echo "RVM Loaded."
   else
      echo "RVM Not installed."
   fi
}

loadrbenv() {
    #loadrvm / unloadrvm if issues, specifically in 'gem env'
    if [ -d "$HOME/.rbenv/bin" ]; then
      export PATH="$HOME/.rbenv/bin:$PATH"$
      eval "$(rbenv init -)"
      echo "rbenv loaded"
      rbenv versions
    else
      echo "rbenv not installed"
    fi
}

devops() {
  cd ~/working/github/devopsrockstars
}

wk() {
 #wkhtmltopdf --viewport-size 1440x900 --page-size "Letter"  --javascript-delay 4000 --grayscale --debug-javascript "$1" ./`date +%s`.pdf
 wkhtmltopdf --page-size "Letter" --footer-font-size 8 --footer-left "[webpage]" --header-font-size 8 --header-left "[isodate] [time]"  \
 --page-size "Letter"  --javascript-delay 4000 --grayscale --debug-javascript "$1" ./`date +%s`.pdf
}

if [ `uname` == Darwin ]; then
    echo "Sourcing Darwin functions..."
    dock() {
      echo "dock"
      osascript -e 'quit app "Messages"'
      killall Dock
      osascript -e 'launch app "Messages"'
    }
fi

if [[ `uname -r` =~ ARCH ]]; then
    echo "Sourcing Arch Linux functions..."
    whatprovides () {
        pkgfile $1
    }
   
    p2 () {
      sudo rm -rf ~/.galaxy-python
      mkdir ~/.galaxy-python
      ln -s /usr/bin/python2 ~/.galaxy-python/python
      ln -s /usr/bin/pip2 ~/.galaxy-python/pip
      ln -s /usr/bin/virtualenv-2.7 ~/.galaxy-python/virtualenv
      export  PATH=~/.galaxy-python:$PATH
    } 
    p3 () {
      sudo rm -rf ~/.galaxy-python
      mkdir ~/.galaxy-python
      ln -s /usr/bin/python ~/.galaxy-python/python
      ln -s /usr/bin/pip ~/.galaxy-python/pip
      export  PATH=~/.galaxy-python:$PATH
    } 
    #then we are sourcing darwin functions
else
    :
fi
